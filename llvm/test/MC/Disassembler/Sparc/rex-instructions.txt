# RUN: llvm-mc --disassemble %s -triple=sparc-unknown-linux -mattr=rex | FileCheck %s

# Section 6.3.1 - Branch on Integer Condition Codes - Short

# CHECK: rbleu 10
0x10 0x05
# CHECK: rbleu -10
0x10 0xfb
# CHECK: rbleu 254
0x10 0x7f
# CHECK: rbleu -256
0x10 0x80
# CHECK: rba   10
0x20 0x05
# CHECK: rbn   10
0x00 0x05
# CHECK: rbne  10
0x24 0x05
# CHECK: rbe   10
0x04 0x05
# CHECK: rbg   10
0x28 0x05
# CHECK: rble  10
0x08 0x05
# CHECK: rbge  10
0x2c 0x05
# CHECK: rbl   10
0x0c 0x05
# CHECK: rbgu  10
0x30 0x05
# CHECK: rbleu 10
0x10 0x05
# CHECK: rbcc  10
0x34 0x05
# CHECK: rbcs  10
0x14 0x05
# CHECK: rbpos 10
0x38 0x05
# CHECK: rbneg 10
0x18 0x05
# CHECK: rbvc  10
0x3c 0x05
# CHECK: rbvs  10
0x1c 0x05

# Section 6.3.2 - Branch on Floating-Point Condition Codes - Short

# CHECK: rfbule 10
0x39 0x05
# CHECK: rfbule -10
0x39 0xfb
# CHECK: rfbule 254
0x39 0x7f
# CHECK: rfbule -256
0x39 0x80
# CHECK: rfba 10
0x21 0x05
# CHECK: rfbn 10
0x01 0x05
# CHECK: rfbu 10
0x1d 0x05
# CHECK: rfbg 10
0x19 0x05
# CHECK: rfbug 10
0x15 0x05
# CHECK: rfbl 10
0x11 0x05
# CHECK: rfbul 10
0x0d 0x05
# CHECK: rfblg 10
0x09 0x05
# CHECK: rfbne 10
0x05 0x05
# CHECK: rfbe 10
0x25 0x05
# CHECK: rfbue 10
0x29 0x05
# CHECK: rfbge 10
0x2d 0x05
# CHECK: rfbuge 10
0x31 0x05
# CHECK: rfble 10
0x35 0x05
# CHECK: rfbo 10
0x3d 0x05

# Section 6.3.3 - Arithmetic operations - Accumulator with register

# CHECK: radd    %o0, %i7
0xbc 0x00
# CHECK: raddcc  %o1, %fp
0xb8 0x11
# CHECK: rsub    %o2, %i5
0xb4 0x22
# CHECK: rsubcc  %o3, %i4
0xb0 0x33
# CHECK: rand    %l4, %i3
0xac 0x44
# CHECK: randcc  %l5, %i2
0xa8 0x55
# CHECK: randn   %l6, %i1
0xa5 0x46
# CHECK: randncc %l7, %i0
0xa1 0x57
# CHECK: ror     %i0, %l7
0x9c 0x88
# CHECK: rorcc   %i1, %l6
0x98 0x99
# CHECK: rorn    %i2, %l5
0x95 0x8a
# CHECK: rorncc  %i3, %l4
0x91 0x9b
# CHECK: rxor    %i4, %o3
0x8c 0xcc
# CHECK: rxorcc  %i5, %o2
0x88 0xdd
# CHECK: rsll    %fp, %o1
0x85 0x6e
# CHECK: rsrl    %i7, %o0
0x81 0xaf

# Section 6.3.4 - Arithmetic operations - Accumulator with immediate

# CHECK: raddcc 10, %l4
0x92 0x0a
# CHECK: raddcc 15, %l4
0x92 0x0f
# CHECK: raddcc -16, %l4
0x92 0x10
# CHECK: rsll 4, %l5
0x97 0x64
# CHECK: rsll 31, %l5
0x97 0x7f
# CHECK: rsrl 2, %l6
0x9b 0xa2

# Section 6.3.5 - Comparison with register

# CHECK: rcmp %l6, %o1
0x99 0x71

# Section 6.3.6 - Comparison with immediate

# CHECK: rcmp %l4, 10
0x93 0x0a

# Section 6.3.7 - Constant assignment

# CHECK: rset5 10, %o1
0x86 0x2a
# CHECK: rone 4, %o1
0x86 0xa4

# Section 6.3.8 - Bit-mask operations

# CHECK: rsetbit 13, %o3
0x8e 0x8d
# CHECK: rclrbit 13, %o3
0x8f 0x4d
# CHECK: rinvbit 13, %o3
0x8e 0xcd
# CHECK: rmasklo 13, %o3
0x8e 0x4d
# CHECK: rtstbit 13, %o3
0x8e 0x6d

# Section 6.3.9 - Register to register copy

# CHECK: rmov %o2, %g3
0xad 0x22

# Section 6.3.10 - Negation

# CHECK: rneg %o3
0x8f 0xc4
# CHECK: rnot %o3
0x8f 0xc5

# Section 6.3.11 - Return instructions

# CHECK: rretrest
0x83 0xc0
# CHECK: rretl
0x83 0xc1

# Section 6.3.12 - Load/Store - 8/16/32/64 - one register

# CHECK: rld [%o3], %l4
0xd0 0x03
# CHECK: rldub [%o3], %l4
0xd0 0x43
# CHECK: rlduh [%o3], %l4
0xd0 0x83
# CHECK: rldd [%o3], %l4
0xd0 0xc3
# CHECK: rldf [%o3], %f1
0xe4 0x23
# CHECK: rlddf [%o3], %f2
0xe8 0xa3

# CHECK: rst %l4, [%o3]
0xd1 0x03
# CHECK: rstb %l4, [%o3]
0xd1 0x43
# CHECK: rsth %l4, [%o3]
0xd1 0x83
# CHECK: rstd %l4, [%o3]
0xd1 0xc3
# CHECK: rstf %f1, [%o3]
0xe5 0x23
# CHECK: rstdf %f4, [%l4]
0xf1 0xa4

# Section 6.3.13 - Load/Store - 8/16/32/64 - fixed register plus immediate

# CHECK: rld [%i0+124], %l4
0xd2 0x9f
# CHECK: rld [%i0+40], %l4
0xd2 0x8a
# CHECK: rld [%o0+40], %l4
0xd2 0xca
# CHECK: rld [%fp+40], %l4
0xd2 0x0a
# CHECK: rld [%sp+40], %l4
0xd2 0x4a
# CHECK: rldf [%i0+40], %f1
0xe6 0xaa
# CHECK: rldf [%fp+40], %f1
0xe6 0x2a
# CHECK: rldf [%sp+40], %f1
0xe6 0x6a

# CHECK: rst %l4, [%i0+40]
0xd3 0x8a
# CHECK: rst %l4, [%o0+40]
0xd3 0xca
# CHECK: rst %l4, [%fp+40]
0xd3 0x0a
# CHECK: rst %l4, [%sp+40]
0xd3 0x4a
# CHECK: rstf %f1, [%i0+40]
0xe7 0xaa
# CHECK: rstf %f1, [%fp+40]
0xe7 0x2a
# CHECK: rstf %f1, [%sp+40]
0xe7 0x6a

# Section 6.3.14 - Load/Store - 8/16/32/64 - one register - auto-incrementing

# CHECK: rldinc [%o3], %l4
0xd0 0x13
# CHECK: rldubinc [%o3], %l4
0xd0 0x53
# CHECK: rlduhinc [%o3], %l4
0xd0 0x93
# CHECK: rlddinc [%o3], %l4
0xd0 0xd3
# CHECK: rldfinc [%o3], %f1
0xe4 0x33
# CHECK: rlddfinc [%o3], %f2
0xe8 0xb3

# CHECK: rstinc %l4, [%o3]
0xd1 0x13
# CHECK: rstbinc %l4, [%o3]
0xd1 0x53
# CHECK: rsthinc %l4, [%o3]
0xd1 0x93
# CHECK: rstdinc %l4, [%o3]
0xd1 0xd3
# CHECK: rstfinc %f1, [%o3]
0xe5 0x33
# CHECK: rstdfinc %f4, [%l4]
0xf1 0xb4

# Section 6.3.15 - Miscellaneous operations - no source operands

# CHECK: rpush %l4
0x93 0xc2

# CHECK: rpop %l4
0x93 0xc3

# CHECK: rta 5
0x97 0xc6

# CHECK: rleave
0x83 0xc7

# CHECK: getpc %l4
0x93 0xc9

# Section 6.4.1 - Branch on integer condition codes - long

# CHECK: rbleu,l 50000
0x12 0xa8 0x00 0x61
# CHECK: rbleu,l -50000
0x12 0x58 0xff 0x9e
# CHECK: rba,l   50000
0x22 0xa8 0x00 0x61
# CHECK: rbn,l   50000
0x02 0xa8 0x00 0x61
# CHECK: rbne,l  50000
0x26 0xa8 0x00 0x61
# CHECK: rbe,l   50000
0x06 0xa8 0x00 0x61
# CHECK: rbg,l   50000
0x2a 0xa8 0x00 0x61
# CHECK: rble,l  50000
0x0a 0xa8 0x00 0x61
# CHECK: rbge,l  50000
0x2e 0xa8 0x00 0x61
# CHECK: rbl,l   50000
0x0e 0xa8 0x00 0x61
# CHECK: rbgu,l  50000
0x32 0xa8 0x00 0x61
# CHECK: rbleu,l 50000
0x12 0xa8 0x00 0x61
# CHECK: rbcc,l  50000
0x36 0xa8 0x00 0x61
# CHECK: rbcs,l  50000
0x16 0xa8 0x00 0x61
# CHECK: rbpos,l 50000
0x3a 0xa8 0x00 0x61
# CHECK: rbneg,l 50000
0x1a 0xa8 0x00 0x61
# CHECK: rbvc,l  50000
0x3e 0xa8 0x00 0x61
# CHECK: rbvs,l  50000
0x1e 0xa8 0x00 0x61

# Section 6.4.2 - Branch on floating-point condition codes - long

# CHECK: rfbule,l 50000
0x3b 0xa8 0x00 0x61
# CHECK: rfbule,l -50000
0x3b 0x58 0xff 0x9e
# CHECK: rfba,l 50000
0x23 0xa8 0x00 0x61
# CHECK: rfbn,l 50000
0x03 0xa8 0x00 0x61
# CHECK: rfbu,l 50000
0x1f 0xa8 0x00 0x61
# CHECK: rfbg,l 50000
0x1b 0xa8 0x00 0x61
# CHECK: rfbug,l 50000
0x17 0xa8 0x00 0x61
# CHECK: rfbl,l 50000
0x13 0xa8 0x00 0x61
# CHECK: rfbul,l 50000
0x0f 0xa8 0x00 0x61
# CHECK: rfblg,l 50000
0x0b 0xa8 0x00 0x61
# CHECK: rfbne,l 50000
0x07 0xa8 0x00 0x61
# CHECK: rfbe,l 50000
0x27 0xa8 0x00 0x61
# CHECK: rfbue,l 50000
0x2b 0xa8 0x00 0x61
# CHECK: rfbge,l 50000
0x2f 0xa8 0x00 0x61
# CHECK: rfbuge,l 5000
0x33 0xa8 0x00 0x61
# CHECK: rfble,l 50000
0x37 0xa8 0x00 0x61
# CHECK: rfbo,l 50000
0x3f 0xa8 0x00 0x61

# Section 6.4.3 - Call and link

# CHECK: call 50000
0x40 0x00 0x30 0xd4

# Section 6.4.4 - Constant assignment

# CHECK: rset21 50000, %l4
0x92 0xf0 0x06 0x1a

# Section 6.4.5 - Generic format 3 SPARC operation

# CHECK: add %sp, %i0, %o2
0x88 0xe6 0x00 0x98
# CHECK: add %sp, -54, %o2
0x88 0xe6 0x80 0xca

# Section 6.4.6 - Floating-point operations

# CHECK: fitos %f0, %f0
0xa0 0xf8 0xc8 0x00
# CHECK: fitod %f0, %f0
0xa0 0xf8 0xd0 0x00
# CHECK: fitoq %f0, %f0
0xa0 0xf8 0xd8 0x00
# CHECK: fstoi %f0, %f0
0xa0 0xf8 0xa2 0x00
# CHECK: fdtoi %f0, %f0
0xa0 0xf8 0xa4 0x00
# CHECK: fqtoi %f0, %f0
0xa0 0xf8 0xa6 0x00
# CHECK: fmovs %f0, %f0
0xa0 0xf8 0x02 0x00
# CHECK: fnegs %f0, %f0
0xa0 0xf8 0x0a 0x00
# CHECK: fabss %f0, %f0
0xa0 0xf8 0x12 0x00
# CHECK: fsqrts %f0, %f0
0xa0 0xf8 0x32 0x00
# CHECK: fsqrtd %f0, %f0
0xa0 0xf8 0x34 0x00
# CHECK: fsqrtq %f0, %f0
0xa0 0xf8 0x36 0x00
# CHECK: fadds %f0, %f0, %f0
0xa0 0xf8 0x42 0x00
# CHECK: faddd %f0, %f0, %f0
0xa0 0xf8 0x44 0x00
# CHECK: faddq %f0, %f0, %f0
0xa0 0xf8 0x46 0x00
# CHECK: fsubs %f0, %f0, %f0
0xa0 0xf8 0x4a 0x00
# CHECK: fsubd %f0, %f0, %f0
0xa0 0xf8 0x4c 0x00
# CHECK: fsubq %f0, %f0, %f0
0xa0 0xf8 0x4e 0x00
# CHECK: fmuls %f0, %f0, %f0
0xa0 0xf8 0x52 0x00
# CHECK: fmuld %f0, %f0, %f0
0xa0 0xf8 0x54 0x00
# CHECK: fmulq %f0, %f0, %f0
0xa0 0xf8 0x56 0x00
# CHECK: fsmuld %f0, %f0, %f0
0xa0 0xf8 0x72 0x00
# CHECK: fdmulq %f0, %f0, %f0
0xa0 0xf8 0x7c 0x00
# CHECK: fdivs %f0, %f0, %f0
0xa0 0xf8 0x5a 0x00
# CHECK: fdivd %f0, %f0, %f0
0xa0 0xf8 0x5c 0x00
# CHECK: fdivq %f0, %f0, %f0
0xa0 0xf8 0x5e 0x00
# CHECK: fcmps %f0, %f0
0xa0 0xf8 0x82 0x00
# CHECK: fcmpd  %f0, %f0
0xa0 0xf8 0x84 0x00
# CHECK: fcmpq  %f0, %f0
0xa0 0xf8 0x86 0x00
# CHECK: fcmpes %f0, %f0
0xa0 0xf8 0x8a 0x00
# CHECK: fcmped %f0, %f0
0xa0 0xf8 0x8c 0x00
# CHECK: fcmpeq %f0, %f0
0xa0 0xf8 0x8e 0x00

# Section 6.5.1 - Set 32-bit constant

# CHECK: rset32 50000, %l4
0x93 0xe8 0x00 0x00 0xc3 0x50

# CHECK: rset32 -4, %o1
0x87 0xe8 0xff 0xff 0xff 0xfc

# CHECK: rset32pc 50000, %l4
0x93 0xe9 0x00 0x00 0xc3 0x50

# Section 6.5.2 - Load from 32-bit address

# CHECK: rld32 [50000], %l4
0x93 0xea 0x00 0x00 0xc3 0x50

# CHECK: rld32pc [50000], %l4
0x93 0xeb 0x00 0x00 0xc3 0x50
