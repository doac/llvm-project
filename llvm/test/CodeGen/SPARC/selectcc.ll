; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=sparc | FileCheck %s -check-prefix=SPARC


; return v == 1
define i32 @test1(i32 %v) #0 {
; SPARC-LABEL: test1:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    subxcc %g0, -1, %o0
entry:
  %cmp = icmp eq i32 %v, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; return v != 1
define i32 @test2(i32 %v) #0 {
; SPARC-LABEL: test2:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    addxcc %g0, %g0, %o0
entry:
  %cmp = icmp ne i32 %v, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; return v == 1 ? 0 : 1
define i32 @test3(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test3:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    addxcc %g0, %g0, %o0
entry:
  %cmp = icmp eq i32 %v, 1
  %cond = select i1 %cmp, i32 0, i32 1
  ret i32 %cond
}

; return v != 1 ? 0 : 1
define i32 @test4(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test4:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    subxcc %g0, -1, %o0
entry:
  %cmp = icmp ne i32 %v, 1
  %cond = select i1 %cmp, i32 0, i32 1
  ret i32 %cond
}

; return v == 1 ? q : 0
define i32 @test5(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test5:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    addxcc %g0, -1, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    and %o1, %o0, %o0
entry:
  %cmp = icmp eq i32 %v, 1
  %cond = select i1 %cmp, i32 %q, i32 0
  ret i32 %cond
}

; return v == 1 ? 0 : q
define i32 @test6(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test6:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    subxcc %g0, %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    and %o1, %o0, %o0
entry:
  %cmp = icmp eq i32 %v, 1
  %cond = select i1 %cmp, i32 0, i32 %q
  ret i32 %cond
}

; return v != 1 ? q : 0
define i32 @test7(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test7:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    subxcc %g0, %g0, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    and %o1, %o0, %o0
entry:
  %cmp = icmp ne i32 %v, 1
  %cond = select i1 %cmp, i32 %q, i32 0
  ret i32 %cond
}

; return v != 1 ? 0 : q
define i32 @test8(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test8:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    xor %o0, 1, %o0
; SPARC-NEXT:    cmp %g0, %o0
; SPARC-NEXT:    addxcc %g0, -1, %o0
; SPARC-NEXT:    retl
; SPARC-NEXT:    and %o1, %o0, %o0
entry:
  %cmp = icmp ne i32 %v, 1
  %cond = select i1 %cmp, i32 0, i32 %q
  ret i32 %cond
}

; return v == 1 ? q : 10
define i32 @test9(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test9:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    cmp %o0, 1
; SPARC-NEXT:    be .LBB8_2
; SPARC-NEXT:    mov %o1, %o0
; SPARC-NEXT:  ! %bb.1: ! %entry
; SPARC-NEXT:    mov 10, %o0
; SPARC-NEXT:  .LBB8_2: ! %entry
; SPARC-NEXT:    retl
; SPARC-NEXT:    nop
entry:
  %cmp = icmp eq i32 %v, 1
  %cond = select i1 %cmp, i32 %q, i32 10
  ret i32 %cond
}

; return v == 1 ? 10 : q
define i32 @test10(i32 %v, i32 %q) #0 {
; SPARC-LABEL: test10:
; SPARC:       ! %bb.0: ! %entry
; SPARC-NEXT:    cmp %o0, 1
; SPARC-NEXT:    be .LBB9_1
; SPARC-NEXT:    nop
; SPARC-NEXT:  ! %bb.2: ! %entry
; SPARC-NEXT:    retl
; SPARC-NEXT:    mov %o1, %o0
; SPARC-NEXT:  .LBB9_1:
; SPARC-NEXT:    retl
; SPARC-NEXT:    mov 10, %o0
entry:
  %cmp = icmp eq i32 %v, 1
  %cond = select i1 %cmp, i32 10, i32 %q
  ret i32 %cond
}

attributes #0 = { nounwind }
